version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - ml-network

  airflow-webserver:
    image: apache/airflow:2.8.0-python3.9
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PROMETHEUS_PUSHGATEWAY_URL: http://prometheus:9091
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./data:/data
      - ./monitoring:/opt/airflow/monitoring
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - airflow_logs:/opt/airflow/logs
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "8080:8080"
    command: >
      bash -c "
      pip install -r /opt/airflow/requirements.txt &&
      airflow webserver
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - ml-network

  airflow-scheduler:
    image: apache/airflow:2.8.0-python3.9
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PROMETHEUS_PUSHGATEWAY_URL: http://prometheus:9091
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./data:/data
      - ./monitoring:/opt/airflow/monitoring
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - airflow_logs:/opt/airflow/logs
      - mlflow_artifacts:/mlflow/artifacts
    command: >
      bash -c "
      pip install -r /opt/airflow/requirements.txt &&
      airflow scheduler
      "
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - ml-network

  airflow-init:
    image: apache/airflow:2.8.0-python3.9
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./data:/data
      - ./monitoring:/opt/airflow/monitoring
      - airflow_logs:/opt/airflow/logs
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
      "
    restart: "no"
    networks:
      - ml-network

  mlflow:
    build: ./mlflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://airflow:airflow@postgres/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - ./data:/data
    ports:
      - "5001:5000"
    command: >
      bash -c "
      mkdir -p /mlflow/artifacts &&
      chmod -R 777 /mlflow/artifacts &&
      mlflow server --backend-store-uri postgresql://airflow:airflow@postgres/mlflow --default-artifact-root /mlflow/artifacts --host 0.0.0.0 --port 5000
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - ml-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
    networks:
      - ml-network

  pushgateway:
    image: prom/pushgateway:latest
    ports:
      - "9091:9091"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9091/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
    networks:
      - ml-network

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
    networks:
      - ml-network

volumes:
  postgres_data:
  airflow_logs:
  mlflow_artifacts:
  prometheus_data:
  grafana_data:

networks:
  ml-network:
    driver: bridge