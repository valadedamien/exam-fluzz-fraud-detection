#!/usr/bin/env python3
"""
Script d'initialisation des donn√©es de r√©f√©rence pour la d√©tection de drift
Utilise un √©chantillon du dataset original pour configurer la baseline
"""

import pandas as pd
import numpy as np
import requests
import json
import argparse
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_reference_data(csv_path: str, sample_size: int = 5000) -> np.ndarray:
    """
    Charge et √©chantillonne les donn√©es de r√©f√©rence depuis le CSV
    """
    logger.info(f"Loading data from {csv_path}")
    
    # Charger le dataset
    df = pd.read_csv(csv_path)
    logger.info(f"Loaded {len(df)} rows")
    
    # Prendre seulement les transactions normales (Class == 0) pour la r√©f√©rence
    normal_transactions = df[df['Class'] == 0]
    logger.info(f"Found {len(normal_transactions)} normal transactions")
    
    # √âchantillonner al√©atoirement
    if len(normal_transactions) > sample_size:
        sample = normal_transactions.sample(n=sample_size, random_state=42)
    else:
        sample = normal_transactions
    
    logger.info(f"Using {len(sample)} transactions as reference")
    
    # Colonnes de features (exclure Class)
    feature_cols = [col for col in df.columns if col != 'Class']
    
    # Retourner les features sous forme de numpy array
    return sample[feature_cols].values

def send_reference_data(api_url: str, reference_data: np.ndarray):
    """
    Envoie les donn√©es de r√©f√©rence √† l'API
    """
    logger.info(f"Sending reference data to {api_url}")
    
    # Convertir en liste pour JSON
    data = {
        "reference_data": reference_data.tolist()
    }
    
    try:
        response = requests.post(
            f"{api_url}/v1/monitoring/drift/reference",
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        response.raise_for_status()
        
        result = response.json()
        logger.info(f"‚úÖ Reference data configured successfully: {result}")
        return True
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Failed to send reference data: {e}")
        return False

def verify_drift_status(api_url: str):
    """
    V√©rifie le statut de la d√©tection de drift
    """
    try:
        response = requests.get(f"{api_url}/v1/monitoring/drift/status")
        response.raise_for_status()
        
        status = response.json()
        logger.info("üìä Drift Detection Status:")
        logger.info(f"  - Reference data available: {status['drift_status']['reference_data_available']}")
        logger.info(f"  - Window size: {status['drift_status']['window_size']}/{status['drift_status']['max_window_size']}")
        logger.info(f"  - Current drift score: {status['drift_status']['current_drift_score']:.4f}")
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to get drift status: {e}")

def main():
    parser = argparse.ArgumentParser(description="Initialize drift detection reference data")
    parser.add_argument("--csv-path", 
                       default="../PART_4/data/creditcard.csv",
                       help="Path to the creditcard dataset CSV")
    parser.add_argument("--api-url", 
                       default="http://localhost:8000",
                       help="API base URL")
    parser.add_argument("--sample-size", 
                       type=int, 
                       default=5000,
                       help="Number of reference samples to use")
    
    args = parser.parse_args()
    
    # V√©rifier que le fichier existe
    csv_path = Path(args.csv_path)
    if not csv_path.exists():
        logger.error(f"CSV file not found: {csv_path}")
        return
    
    try:
        # 1. Charger les donn√©es de r√©f√©rence
        reference_data = load_reference_data(str(csv_path), args.sample_size)
        
        # 2. Envoyer √† l'API
        success = send_reference_data(args.api_url, reference_data)
        
        if success:
            # 3. V√©rifier le statut
            verify_drift_status(args.api_url)
            logger.info("üéâ Drift detection reference data initialized successfully!")
        else:
            logger.error("‚ùå Failed to initialize reference data")
            
    except Exception as e:
        logger.error(f"Error during initialization: {e}")

if __name__ == "__main__":
    main()